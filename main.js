!function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n){var r=n.items,o=n.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=Array.from(r),this._renderer=o,this._container=document.querySelector(e)}var n,r;return n=t,(r=[{key:"constructItems",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var o=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),r(this,"_handleOverlayClose",(function(e){e.target===n._popupElement&&n.close()})),r(this,"_handleButtonClose",(function(){n.close()})),this._popupElement=document.querySelector(t)}var t,o;return t=e,(o=[{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("click",this._handleOverlayClose),this._popupElement.querySelector(".popup__close-button").addEventListener("click",this._handleButtonClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleOverlayClose),this._popupElement.querySelector(".popup__close-button").removeEventListener("click",this._handleButtonClose)}}])&&n(t.prototype,o),e}();function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},s(e,t,n||e)}function a(e,t){return a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},a(e,t)}function c(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(f,e);var t,n,r,o,i=(r=f,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(r);if(o){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function f(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f),i.call(this,e)}return t=f,(n=[{key:"open",value:function(e,t){s(l(f.prototype),"open",this).call(this),this._popupElement.querySelector(".popup__caption").textContent=e,this._popupElement.querySelector(".popup__image").src=t,this._popupElement.querySelector(".popup__image").alt=e}}])&&u(t.prototype,n),f}(o);function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _(e,t,n){return _="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=v(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},_(e,t,n||e)}function m(e,t){return m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},m(e,t)}function d(e,t){if(t&&("object"===p(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return y(e)}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e){return v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},v(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=v(r);if(o){var n=v(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return d(this,e)});function u(e,t){var n,r,o,s,a=t.submitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),s=function(){n.renderProgress(!0),n._submitHandler(n._getInputValues())},(o="_submitThisForm")in(r=y(n=i.call(this,e)))?Object.defineProperty(r,o,{value:s,enumerable:!0,configurable:!0,writable:!0}):r[o]=s,n._submitHandler=a,n._formElement=n._popupElement.querySelector(".popup__form"),n._submitButton=n._popupElement.querySelector(".popup__submit"),n._submitButton.value=n._submitButton.textContent,n}return t=u,(n=[{key:"_getInputValues",value:function(){var e=Array.from(this._formElement.querySelectorAll(".popup__input")),t={};return e.forEach((function(e){t[e.name]=e.value})),t}},{key:"renderProgress",value:function(e){this._submitButton.textContent=e?"Saving...":this._submitButton.value}},{key:"close",value:function(){_(v(u.prototype),"close",this).call(this),this._formElement.reset()}},{key:"setEventListeners",value:function(){this._formElement.addEventListener("submit",this._submitThisForm)}}])&&h(t.prototype,n),u}(o);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var k=function(){function e(t){var n=t.userNameSelector,r=t.userAboutSelector,o=t.userImageSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userNameElement=document.querySelector(n),this._userAboutElement=document.querySelector(r),this._userImageElement=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._userNameElement.textContent,about:this._userAboutElement.textContent,avatar:this._userImageElement.src}}},{key:"setUserInfo",value:function(e){this._userNameElement.textContent=e.name,this._userAboutElement.textContent=e.about,this._userImageElement.src=e.avatar}}])&&g(t.prototype,n),e}();function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var S=function(){function e(t,n,r,o){var i=o.handleCardClick,u=o.handleBinClick,s=o.handleAddLike,a=o.handleRemoveLike;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._link=n.link,this._name=n.name,this._cardSelector=r,this._handleCardClick=i,this._handleBinClick=u,this._handleAddLike=s,this._handleRemoveLike=a,this._cardID=n._id,this._cardOwnerID=n.owner._id,this._likes=n.likes,this._userID=t}var t,n;return t=e,(n=[{key:"_getCardTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".elements__item").cloneNode(!0)}},{key:"generateCard",value:function(){var e=this;return this._item=this._getCardTemplate(),this._setEventListeners(),this._item.querySelector(".elements__image").src=this._link,this._item.querySelector(".elements__image").alt=this._name,this._item.querySelector(".elements__title").textContent=this._name,this._item.querySelector(".elements__like-counter").textContent=this._likes.length,this._cardOwnerID===this._userID&&this._item.querySelector(".elements__delete-button").classList.add("elements__delete-button_active"),this._likes.some((function(t){return t._id===e._userID}))&&this.toggleLike(this._likes.length),this._item}},{key:"toggleLike",value:function(e){this._item.querySelector(".elements__like-button").classList.toggle("elements__like-button_active"),this._item.querySelector(".elements__like-counter").textContent=e}},{key:"deleteCard",value:function(){this._item.remove(),this._item=null}},{key:"_setEventListeners",value:function(){var e=this;this._item.querySelector(".elements__image").addEventListener("click",(function(){return e._handleCardClick(e._name,e._link)})),this._item.querySelector(".elements__delete-button").addEventListener("click",(function(){return e._handleBinClick(e._cardID)})),this._item.querySelector(".elements__like-button").addEventListener("click",(function(){e._item.querySelector(".elements__like-button").classList.contains("elements__like-button_active")?e._handleRemoveLike(e._cardID):e._handleAddLike(e._cardID)}))}}])&&E(t.prototype,n),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._submitButtonInactiveClass=t.submitButtonInactiveClass,this._inputErrorClass=t.inputErrorClass,this._errorMessageClassActive=t.errorMessageClassActive,this._formElement=n,this._submitButton=this._formElement.querySelector(t.submitButtonSelector),this._inputList=Array.from(this._formElement.querySelectorAll(t.inputSelector)),this._errorList=Array.from(this._formElement.querySelectorAll(t.errorMessageSelector))}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorMessageClassActive)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorMessageClassActive),t.textContent=""}},{key:"_checkInputsValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_checkFormInvalidity",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"toggleSubmitState",value:function(){this._checkFormInvalidity()?(this._submitButton.classList.add(this._submitButtonInactiveClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._submitButtonInactiveClass),this._submitButton.disabled=!1)}},{key:"_setFormState",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputsValidity(t),e.toggleSubmitState()}))}))}},{key:"clearValidationErrors",value:function(){var e=this;this._inputList.forEach((function(t){return t.classList.remove(e._inputErrorClass)})),this._errorList.forEach((function(t){t.classList.remove(e._errorMessageClassActive),t.textContent=""}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setFormState()}}])&&w(t.prototype,n),e}();function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e,t){return O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},O(e,t)}function P(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return P(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._formElement=t._popupElement.querySelector(".popup__form"),t}return t=u,(n=[{key:"submitRequest",value:function(e){this._initiateSubmit=e}},{key:"setEventListeners",value:function(){var e=this;this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._initiateSubmit()}))}}])&&I(t.prototype,n),u}(o);function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var B,T,A=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject(e.statusText)}},{key:"getProfileInfo",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"getServerImages",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"setProfileInfo",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e.fullName,about:e.about})}).then((function(e){return t._checkResponse(e)}))}},{key:"addNewImage",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:e.imageTitle,link:e.imageLink})}).then((function(e){return t._checkResponse(e)}))}},{key:"deleteImage",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then((function(e){return t._checkResponse(e)}))}},{key:"likeCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"}).then((function(e){return t._checkResponse(e)}))}},{key:"unLikeCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"}).then((function(e){return t._checkResponse(e)}))}},{key:"editProfileImage",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e.avatarLink})}).then((function(e){return t._checkResponse(e)}))}}])&&R(t.prototype,n),e}(),x=document.querySelector(".profile__edit-profile"),D=document.querySelector(".profile__edit-image"),U=document.querySelector(".profile__add-photo"),N=document.querySelector(".popup__form"),V=N.querySelector(".popup__input_content_full-name"),M=N.querySelector(".popup__input_content_about"),H={inputSelector:".popup__input",submitButtonSelector:".popup__submit",errorMessageSelector:".popup__input-error-msg",submitButtonInactiveClass:"popup__submit_inactive",inputErrorClass:"popup__input_type_error",errorMessageClass:"popup__input-error-msg",errorMessageClassActive:"popup__input-error-msg_active"},F=document.querySelector(".popup__profile-form"),J=document.querySelector(".popup__edit-profile-image-form"),z=document.querySelector(".popup__add-image-form"),G=new C(H,F),K=new C(H,J),Q=new C(H,z);G.enableValidation(),K.enableValidation(),Q.enableValidation();var W=new A({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"f21cbaab-48ba-469f-bdb9-c2956aed6b6b","Content-Type":"application/json"}});W.getProfileInfo().then((function(e){ne.setUserInfo(e),B=e._id,W.getServerImages().then((function(e){(T=new t(".elements",{items:e,renderer:function(e){T.addItem($(e))}})).constructItems()})).catch((function(e){return console.log("Error from getServerImages:",e)}))})).catch((function(e){return console.log("Error from getProfileInfo:",e)}));var X=new j(".popup_alert-delete");X.setEventListeners();var Y=new f(".popup_large-image");function Z(e,t){Y.open(e,t)}function $(e){var t=new S(B,e,"#image-template",{handleCardClick:Z,handleAddLike:function(e){W.likeCard(e).then((function(e){t.toggleLike(e.likes.length)})).catch((function(e){return console.log("Error from likeCard:",e)}))},handleRemoveLike:function(e){W.unLikeCard(e).then((function(e){t.toggleLike(e.likes.length)})).catch((function(e){return console.log("Error from unLikeCard:",e)}))},handleBinClick:function(e){X.open(),X.submitRequest((function(){W.deleteImage(e).then((function(e){t.deleteCard(),X.close()})).catch((function(e){return console.log("Error from deleteImage:",e)}))}))}});return t.generateCard()}var ee=new b(".popup_add-image",{submitHandler:function(e){W.addNewImage(e).then((function(e){T.addItem($(e)),ee.close()})).catch((function(e){return console.log("Error from addNewImage:",e)})).finally((function(){return ee.renderProgress(!1)}))}}),te=new b(".popup_edit-profile-image",{submitHandler:function(e){W.editProfileImage(e).then((function(e){ne.setUserInfo(e),te.close()})).catch((function(e){return console.log("Error from editProfileImage:",e)})).finally((function(){return te.renderProgress(!1)}))}});te.setEventListeners(),D.addEventListener("click",(function(){K.clearValidationErrors(),K.toggleSubmitState(),te.open()})),ee.setEventListeners(),U.addEventListener("click",(function(){Q.clearValidationErrors(),Q.toggleSubmitState(),ee.open()}));var ne=new k({userNameSelector:".profile__name",userAboutSelector:".profile__occupation",userImageSelector:".profile__image"}),re=new b(".popup_profile",{submitHandler:function(e){W.setProfileInfo(e).then((function(e){ne.setUserInfo(e),re.close()})).catch((function(e){return console.log("Error from setProfileInfo:",e)})).finally((function(){return re.renderProgress(!1)}))}});re.setEventListeners(),x.addEventListener("click",(function(){var e=ne.getUserInfo();V.value=e.name,M.value=e.about,G.clearValidationErrors(),G.toggleSubmitState(),re.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,